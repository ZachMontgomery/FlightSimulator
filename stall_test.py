import numpy as np

d2r = np.pi / 180.
as1 = 10. * d2r
as2 = 30. * d2r

#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
# lift
#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
Wref = 2800.
rhoref = .0023769
Vref = 180.
Sw = 185.
bw = 33.
c_w = Sw / bw

CLref = 2. * Wref / rhoref / Vref ** 2. / Sw
# print(CLref)

CLa = 4.4
CLde = .35
deref = 5. * d2r

CL_as1 = CLref + CLa * as1
# print(CL_as1)
x = 1. * CL_as1
# print(x)

de = np.linspace(-15.*d2r,15.*d2r,7)

a = np.linspace(0.,as1,100)
# a = np.linspace(0.,np.pi/2.,100)
a2 = np.linspace(as2,np.pi/2.,100)
# a2 = np.linspace(0.,np.pi/2.,100)
a1 = np.linspace(as1,as2,100)
# a1 = np.linspace(0.,np.pi/2.,100)


# Lift no stall
#*********************************************************************************************************************************

CL = np.zeros((a.size,de.size))

for i in range(a.size):
	for j in range(de.size):
		CL[i,j] = CLref + CLa * a[i] + CLde * (de[j] - deref)

# Lift stall 2
#*********************************************************************************************************************************
CL2 = x*np.cos(a2)


# Lift stall 1
#*********************************************************************************************************************************
mat = np.array([[   as2**3., as2**2., as2, 1.],
                [   as1**3., as1**2., as1, 1.],
                [3.*as2**2.,  2.*as2,  1., 0.],
                [3.*as1**2.,  2.*as1,  1., 0.]])
b = np.array([x*np.cos(as2), CLref + CLa * as1, -x*np.sin(as2), CLa])

A, B, C, D = np.linalg.solve(mat,b)

CL1 = np.zeros((a1.size,de.size))
for i in range(a1.size):
	for j in range(de.size):
		CL1[i,j] = A * a1[i] ** 3. + B * a1[i] ** 2. + C * a1[i] + D + ((as2 - a1[i]) / (as2 - as1)) ** 2. * CLde * (de[j] - deref)

#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
# Drag
#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************

CDde = 0.01
CDa = 0.35
CDaa = 0.1
CDref = 0.05
#self.Cm_ref = -self.zbp * self.CD_ref / self.c_w
CD_2 = CDaa / 2. / CLa ** 2.
CD_1 = (CDa - 2. * CD_2 * CLref * CLa) / CLa
CD_0 = CDref - CD_1 * CLref - CD_2 * CLref ** 2.

# print(CD_0,CD_1,CD_2)


# drag no stall
#*********************************************************************************************************************************
CD = np.zeros((a.size,de.size))

for i in range(a.size):
	for j in range(de.size):
		CD[i,j] = CD_0 + CD_1 * CL[i,j] + CD_2 * CL[i,j] ** 2. + CDde * (de[j] - deref)


# drag stall 2
#*********************************************************************************************************************************
CD2 = 2. * np.sin(a2)

# drag stall 1
#*********************************************************************************************************************************
mat = np.array([[   as2**3., as2**2., as2, 1.],
                [   as1**3., as1**2., as1, 1.],
                [3.*as2**2.,  2.*as2,  1., 0.],
                [3.*as1**2.,  2.*as1,  1., 0.]])

CD1 = np.zeros((a1.size,de.size))
Ad = np.zeros(de.size)
Bd = np.zeros(de.size)
Cd = np.zeros(de.size)
Dd = np.zeros(de.size)
k = a.size - 1
for i in range(a1.size):
	for j in range(de.size):
		
		b = np.array([2. * np.sin(as2), CD_0 + CD_1 * CL[k,j] + CD_2 * CL[k,j] ** 2., 2. * np.cos(as2), CD_1 * CLa + 2. * CD_2 * CL[k,j] * CLa])
		
		Ad[j], Bd[j], Cd[j], Dd[j] = np.linalg.solve(mat,b)
		
		
		CD1[i,j] = Ad[j] * a1[i] ** 3. + Bd[j] * a1[i] ** 2. + Cd[j] * a1[i] + Dd[j] + ((as2 - a1[i]) / (as2 - as1)) ** 2. * CDde * (de[j] - deref)


#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
# Moment
#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************

zbp = -1.
Cmref = -zbp * CDref / c_w
Cma = -.68
Cmde = -.92

# moment no stall
#*********************************************************************************************************************************
CM = np.zeros((a.size,de.size))

for i in range(a.size):
	for j in range(de.size):
		CM[i,j] = Cmref + Cma / CLa * (CL[i,j] * np.cos(a[i]) - CLref + CD[i,j] * np.sin(a[i])) + Cmde * (de[j] - deref)



# moment stall 2
#*********************************************************************************************************************************
CM2 = np.zeros((a2.size))
CM2 = -.6*np.sin(a2)

# for i in range(a2.size):
	# CM2[i] = Cmref + Cma / CLa * (CL2[i] * np.cos(a2[i]) - CLref + CD2[i] * np.sin(a2[i]))


# moment stall 1
#*********************************************************************************************************************************
asmin = 20. * d2r
mat = np.array([[      as1**4.,      as1**3.,   as1**2.,   as1, 1.],
                [   4.*as1**3.,   3.*as1**2.,    2.*as1,    1., 0.],
                [      as2**4.,      as2**3.,   as2**2.,   as2, 1.],
                [   4.*as2**3.,   3.*as2**2.,    2.*as2,    1., 0.],
                [ 4.*asmin**3., 3.*asmin**2.,  2.*asmin,    1., 0.]])


CM1 = np.zeros((a1.size,de.size))
Am = np.zeros(de.size)
Bm = np.zeros(de.size)
Cm = np.zeros(de.size)
Dm = np.zeros(de.size)
Em = np.zeros(de.size)
Fm = np.zeros(de.size)
k = a.size-1
for i in range(a1.size):
	for j in range(de.size):
		
		b = np.array([CM[k,j],
		              Cma/CLa*(-CL[k,j]*np.sin(as1) + CLa*np.cos(as1) + CD[k,j]*np.cos(as1) + (CD_1*CLa + 2.*CD_2*CL[k,j]*CLa)*np.sin(as1)),
		              -0.6 * np.sin(as2),
		              -0.6 * np.cos(as2),
		              0.])
		
		
		Am[j], Bm[j], Cm[j], Dm[j], Em[j] = np.linalg.solve(mat,b)
		
		
		CM1[i,j] = Am[j]*a1[i]**4. + Bm[j]*a1[i]**3. + Cm[j]*a1[i]**2. + Dm[j]*a1[i]**1. + Em[j] + ((as2 - a1[i]) / (as2 - as1)) ** 2. * Cmde * (de[j] - deref)

# CM1 = np.zeros((a1.size,de.size))

# for i in range(a1.size):
	# for j in range(de.size):
		# CM1[i,j] = Cmref + Cma / CLa * (CL1[i,j] * np.cos(a1[i]) - CLref + CD1[i,j] * np.sin(a1[i])) + ((as2 - a1[i]) / (as2 - as1)) ** 2. * Cmde * (de[j] - deref)


#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
# plots
#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
#*********************************************************************************************************************************
import matplotlib.pyplot as plt

plt.figure()
plt.plot(a/d2r,CL,'b')
plt.plot(a2/d2r,CL2,'g')
plt.plot(a1/d2r,CL1,'r')
plt.axis([0.,90.,0.,1.5])

plt.figure()
plt.plot(a/d2r,CD,'b')
plt.plot(a2/d2r,CD2,'g')
plt.plot(a1/d2r,CD1,'r')
plt.axis([0.,90.,0.,2.])

plt.figure()
plt.plot(a/d2r,CM,'b')
plt.plot(a2/d2r,CM2,'g')
plt.plot(a1/d2r,CM1,'r')
# plt.axis([0.,90.,-0.4,.4])

plt.show()
